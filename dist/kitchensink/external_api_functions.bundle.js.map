{"version":3,"file":"external_api_functions.bundle.js","mappings":"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","sources":["webpack://extension-kitchensink/./src/components/ExternalApiFunctions/index.ts","webpack://extension-kitchensink/./src/components/ExternalApiFunctions/data/DataReducer.ts","webpack://extension-kitchensink/./src/utils/extract_message_from_error.ts","webpack://extension-kitchensink/./src/components/ExternalApiFunctions/utils/fetch_proxy.ts","webpack://extension-kitchensink/./src/components/ExternalApiFunctions/components/Auth/Auth.tsx","webpack://extension-kitchensink/./src/components/ExternalApiFunctions/utils/validate_data_response.ts","webpack://extension-kitchensink/./src/components/ExternalApiFunctions/components/DataServerDemo/DataServerDemo.tsx","webpack://extension-kitchensink/./src/components/ExternalApiFunctions/components/GoogleSheetsDemo/GoogleSheetsDemo.tsx","webpack://extension-kitchensink/./src/components/ExternalApiFunctions/ExternalApiFunctions.tsx","webpack://extension-kitchensink/./src/components/SandboxStatus/SandboxStatus.tsx"],"sourcesContent":["/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\n// Authorization options\nexport enum AuthOption {\n  Custom = 'Custom',\n  Google = 'Google',\n  Github = 'Github',\n  Auth0 = 'Auth0',\n  Auth0Alt = 'Auth0Alt',\n}\n\n// Posts server\n\nexport const POSTS_SERVER_URL = process.env.POSTS_SERVER_URL\n\n// Centralize setup of client ids, keys and scopes\n\n// The Google client id should be defined in the .env file. See README.md\nexport const GOOGLE_CLIENT_ID = process.env.GOOGLE_CLIENT_ID\n// Authorization scopes required by the API; multiple scopes can be\n// included, separated by spaces.\nexport const GOOGLE_SCOPES =\n  'https://www.googleapis.com/auth/spreadsheets.readonly https://www.googleapis.com/auth/userinfo.profile'\n\n// The Github client id should be defined in the .env file. See README.md\nexport const GITHUB_CLIENT_ID = process.env.GITHUB_CLIENT_ID\n\n// The Auth0 client id should be defined in the .env file. See README.md\nexport const AUTH0_CLIENT_ID = process.env.AUTH0_CLIENT_ID\n// Authorization scopes required by the API; multiple scopes can be\n// included, separated by spaces.\nexport const AUTH0_SCOPES =\n  'openid profile email https://www.googleapis.com/auth/spreadsheets.readonly'\n// Auth0 will provide a domain to use for OAUTH authentication.\nexport const AUTH0_BASE_URL = process.env.AUTH0_BASE_URL\n","/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nimport type { Dispatch } from 'react'\n\n/**\n * Centralized data for extanal API demos. Use react useReducer hooks.\n */\n\n// Initial stats\nexport const initialState: DataState = {\n  posts: [],\n  name: '',\n  title: '',\n  errorMessage: undefined,\n}\n\n// The state interface\nexport interface DataState {\n  posts: any[]\n  name: string\n  title: string\n  errorMessage?: string\n  sheetData?: any[]\n}\n\n// Supported actions\nenum Action {\n  initialize,\n  updatePosts,\n  updateName,\n  updateTitle,\n  updateErrorMessage,\n  updateSheetData,\n}\n\n// The reducer\nexport const reducer = (state: DataState, action: any) => {\n  const { type, payload } = action\n  switch (type) {\n    case Action.updatePosts:\n      return {\n        ...state,\n        posts: payload,\n      }\n    case Action.updateName:\n      return {\n        ...state,\n        name: payload,\n      }\n    case Action.updateTitle:\n      return {\n        ...state,\n        title: payload,\n      }\n    case Action.updateErrorMessage:\n      return {\n        ...state,\n        errorMessage: payload,\n      }\n    case Action.updateSheetData:\n      return {\n        ...state,\n        sheetData: payload,\n      }\n    case Action.initialize:\n      return { ...initialState }\n    default:\n      return state\n  }\n}\n\n/**\n * Update posts\n * @param dispatch\n * @param posts\n */\nexport const updatePosts = (dispatch: Dispatch<any>, posts: any[]) =>\n  dispatch({ type: Action.updatePosts, payload: posts })\n\n/**\n * Update name of poster\n * @param dispatch\n * @param name\n */\nexport const updateName = (dispatch: Dispatch<any>, name: string) =>\n  dispatch({ type: Action.updateName, payload: name })\n\n/**\n *\n * @param dispatch Update title of post\n * @param title\n */\nexport const updateTitle = (dispatch: Dispatch<any>, title: string) =>\n  dispatch({ type: Action.updateTitle, payload: title })\n\n/**\n * Update error message\n * @param dispatch\n * @param errorMessage\n */\nexport const updateErrorMessage = (\n  dispatch: Dispatch<any>,\n  errorMessage?: string\n) => dispatch({ type: Action.updateErrorMessage, payload: errorMessage })\n\n/**\n * Update sheet data\n * @param dispatch\n * @param sheetData\n */\nexport const updateSheetData = (dispatch: Dispatch<any>, sheetData: any[]) =>\n  dispatch({ type: Action.updateSheetData, payload: sheetData })\n\n/**\n * Initialize state\n * @param dispatch\n */\nexport const initializeState = (dispatch: Dispatch<any>) =>\n  dispatch({ type: Action.initialize })\n","/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\nexport const extractMessageFromError = (error: any): string => {\n  if (typeof error === 'string') {\n    return error\n  }\n  if (error.message) {\n    return error.message\n  }\n  return `${error}`\n}\n","/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\nimport type {\n  ExtensionSDK,\n  FetchProxy,\n  FetchCustomParameters,\n} from '@looker/extension-sdk'\n\n/**\n * With the advent of enforcement of the SameSite attribute for cookies, an authorization\n * header is being used instead of cookies.\n * @param extensionSDK\n * @param locationState\n */\nexport const getDataServerFetchProxy = (\n  extensionSDK: ExtensionSDK,\n  locationState?: any\n): FetchProxy => {\n  const init: FetchCustomParameters = {}\n  if (locationState && locationState.jwtToken) {\n    init.headers = {\n      Authorization: `Bearer ${locationState.jwtToken}`,\n    }\n  }\n  return extensionSDK.createFetchProxy(undefined, init)\n}\n","/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nimport React, { useContext, useEffect, useState } from 'react'\nimport { useHistory, useLocation } from 'react-router-dom'\nimport { intersects } from 'semver'\nimport {\n  Box,\n  Button,\n  ButtonOutline,\n  Dialog,\n  Heading,\n  DialogContent,\n  SpaceVertical,\n  Text,\n} from '@looker/components'\nimport type { Looker40SDK } from '@looker/sdk'\nimport type { ExtensionContextData2 } from '@looker/extension-sdk-react'\nimport { ExtensionContext2 } from '@looker/extension-sdk-react'\nimport {\n  AuthOption,\n  POSTS_SERVER_URL,\n  GOOGLE_CLIENT_ID,\n  GOOGLE_SCOPES,\n  GITHUB_CLIENT_ID,\n  AUTH0_CLIENT_ID,\n  AUTH0_SCOPES,\n  AUTH0_BASE_URL,\n} from '../..'\nimport {\n  initializeState,\n  updateErrorMessage,\n  updateName,\n} from '../../data/DataReducer'\nimport { extractMessageFromError } from '../../../../utils/extract_message_from_error'\nimport { getDataServerFetchProxy } from '../../utils/fetch_proxy'\nimport type { AuthProps } from './types'\n\n/**\n * Authorization component. Monitors whether a user is signed in or not.\n * Provides options for a user to sign in.\n * User can sign in without any authentication.\n * User can sign in using Google OAUTH2\n */\nexport const Auth: React.FC<AuthProps> = ({ dataState, dataDispatch }) => {\n  // Get access to the extension SDK and the looker API SDK.\n  const { extensionSDK, coreSDK } =\n    useContext<ExtensionContextData2<Looker40SDK>>(ExtensionContext2)\n\n  // Dialog state\n  const [dialogOpen, setDialogOpen] = useState(false)\n\n  // React router setup\n  const history = useHistory()\n  const location = useLocation<any>()\n\n  // Component data state\n  const { name } = dataState\n\n  // First time setup\n  useEffect(() => {\n    const initialize = async () => {\n      if (\n        GOOGLE_CLIENT_ID === '' ||\n        GITHUB_CLIENT_ID === '' ||\n        AUTH0_CLIENT_ID === ''\n      ) {\n        updateErrorMessage(\n          dataDispatch,\n          'Google, Github or Auth0 client id has not been defined. Please see README.md for instructions.'\n        )\n        return\n      }\n      const { authOption, accessToken, jwtToken } = location.state || {}\n      if (jwtToken) {\n        // Got jwt token, check its still valid\n        const isAuthorized = await dataServerAuthCheck()\n        if (isAuthorized) {\n          // Still valid, repopulate user information\n          switch (authOption) {\n            case AuthOption.Google:\n              getGoogleUserInfo(accessToken)\n              break\n            case AuthOption.Github:\n              getGithubUserInfo(accessToken)\n              break\n            case AuthOption.Auth0:\n              getAuth0UserInfo(accessToken)\n              break\n            default:\n              getLookerUserInfo()\n          }\n        } else {\n          // Not authorized, clear out push state\n          history.replace(location.pathname, {})\n        }\n      }\n    }\n    initialize()\n  }, [])\n\n  // Check to see if the users jwt token is still valid\n  const dataServerAuthCheck = async (): Promise<boolean> => {\n    try {\n      const dataServerFetchProxy = getDataServerFetchProxy(\n        extensionSDK,\n        location.state\n      )\n      const response = await dataServerFetchProxy.fetchProxy(\n        `${POSTS_SERVER_URL}/auth`\n      )\n      return response.ok\n    } catch (error) {\n      console.error(error)\n      return false\n    }\n  }\n\n  // Log the user into to data server using Looker as a proxy. This creates a JWT token\n  // that is stored in push state\n  // The jwt token is only created if the custom secret resolved by the Looker server\n  // matches the secret held by the data server. Essentially, this is a secure exchange\n  // of a code (the secret) for an access token (the JWT token).\n  const dataServerAuth = async (body: any): Promise<string | undefined> => {\n    try {\n      // The custom secret will be resolved by the Looker server.\n      body.client_secret = extensionSDK.createSecretKeyTag('custom_secret_key')\n      const response = await extensionSDK.serverProxy(\n        `${POSTS_SERVER_URL}/auth`,\n        {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            Accept: 'application/json',\n          },\n          body: JSON.stringify(body),\n        }\n      )\n      if (response.ok && response.body && response.body.jwt_token) {\n        return response.body.jwt_token\n      }\n    } catch (error) {\n      console.error(error)\n    }\n    return undefined\n  }\n\n  // Log out of the data server\n  const dataServerAuthOut = async (): Promise<void> => {\n    try {\n      const dataServerFetchProxy = getDataServerFetchProxy(\n        extensionSDK,\n        location.state\n      )\n      dataServerFetchProxy.fetchProxy(`${POSTS_SERVER_URL}/authout`)\n    } catch (error) {\n      console.error(error)\n    }\n    updateName(dataDispatch, '')\n  }\n\n  // Toggle to change authorization. If logged in, the user is logged out.\n  // If not logged in, the authorize choice dialog is displayed.\n  const changeAuthorization = async () => {\n    const { jwtToken } = location.state || {}\n    updateErrorMessage(dataDispatch, undefined)\n    if (jwtToken) {\n      initializeState(dataDispatch)\n      await dataServerAuthOut()\n      history.replace(location.pathname, {})\n    } else {\n      setDialogOpen(true)\n    }\n  }\n\n  // Google login\n  const googleSignin = async () => {\n    try {\n      const response = await extensionSDK.oauth2Authenticate(\n        'https://accounts.google.com/o/oauth2/v2/auth',\n        {\n          client_id: GOOGLE_CLIENT_ID!,\n          scope: GOOGLE_SCOPES,\n          response_type: 'token',\n        }\n      )\n      const { access_token, expires_in } = response\n      // Get information about the just logged in user\n      const { id, name } = await getGoogleUserInfo(access_token)\n      const jwtToken = await signinDataServer(\n        AuthOption.Google,\n        id,\n        name,\n        access_token,\n        expires_in\n      )\n      updateLocationPushState(\n        AuthOption.Google,\n        jwtToken,\n        access_token,\n        access_token\n      )\n    } catch (error) {\n      const errorMessage = extractMessageFromError(error)\n      if (\n        errorMessage.startsWith(\n          'Extension not entitled to access external oauth2 API url'\n        )\n      ) {\n        updateErrorMessage(\n          dataDispatch,\n          \"Please add 'https://accounts.google.com/o/oauth2/v2/auth' to the extensions oauth2_urls entitlements\"\n        )\n      } else {\n        updateErrorMessage(dataDispatch, 'Login failed')\n        console.error('failed to login', error)\n      }\n    }\n  }\n\n  // Get information about user from Google\n  const getGoogleUserInfo = async (accessToken?: string) => {\n    let name = 'Unknown'\n    let id = 'Unknown'\n    try {\n      // Get information about user from google\n      const userInfoResponse = await extensionSDK.fetchProxy(\n        `https://www.googleapis.com/oauth2/v2/userinfo`,\n        {\n          headers: {\n            Authorization: `Bearer ${accessToken}`,\n          },\n        }\n      )\n      if (userInfoResponse.ok) {\n        name = userInfoResponse.body?.name || 'Unknown'\n        id = userInfoResponse.body?.id || 'Unknown'\n      }\n    } catch (error) {\n      const errorMessage = extractMessageFromError(error)\n      updateErrorMessage(dataDispatch, errorMessage)\n      console.error(error)\n    }\n    updateName(dataDispatch, name)\n    return { id, name }\n  }\n\n  // Github login\n  const githubSignin = async () => {\n    const authenticateParameters: Record<string, string> = {\n      client_id: GITHUB_CLIENT_ID!,\n      response_type: 'code',\n    }\n    try {\n      const response = await extensionSDK.oauth2Authenticate(\n        'https://github.com/login/oauth/authorize',\n        authenticateParameters,\n        'GET'\n      )\n      // Note the client secret is securely stored in the Looker server.\n      // Do NOT expose the client secret in the extension code.\n      // Note github does not support code challenge.\n      const exchangeParameters: Record<string, string> = {\n        client_id: GITHUB_CLIENT_ID!,\n        code: response.code,\n        client_secret: extensionSDK.createSecretKeyTag('github_secret_key'),\n      }\n      const codeExchangeResponse =\n        await extensionSDK.oauth2ExchangeCodeForToken(\n          'https://github.com/login/oauth/access_token',\n          exchangeParameters\n        )\n      const { access_token, error_description } = codeExchangeResponse\n      if (!access_token) {\n        updateErrorMessage(\n          dataDispatch,\n          error_description || 'Authentication failed'\n        )\n      } else {\n        const { id, name } = await getGithubUserInfo(access_token)\n        if (!id) {\n          updateErrorMessage(\n            dataDispatch,\n            'Failed to retrieve information about user'\n          )\n        } else {\n          const jwtToken = await signinDataServer(\n            AuthOption.Github,\n            id,\n            name,\n            access_token\n          )\n          updateLocationPushState(AuthOption.Github, jwtToken, access_token)\n        }\n      }\n    } catch (error) {\n      const errorMessage = extractMessageFromError(error)\n      if (\n        errorMessage.startsWith(\n          'Extension not entitled to access external oauth2 API url'\n        )\n      ) {\n        updateErrorMessage(\n          dataDispatch,\n          \"Please add 'https://github.com/login/oauth/authorize' and 'https://github.com/login/oauth/access_token' to the extensions oauth2_urls entitlements\"\n        )\n      } else {\n        updateErrorMessage(dataDispatch, 'Login failed')\n        console.error('failed to login', error)\n      }\n    }\n  }\n\n  // Get information about the use from Github\n  const getGithubUserInfo = async (accessToken?: string) => {\n    let name\n    let id\n    try {\n      const userInfoResponse = await extensionSDK.fetchProxy(\n        'https://api.github.com/user',\n        {\n          headers: {\n            Authorization: `Bearer ${accessToken}`,\n          },\n        }\n      )\n      if (userInfoResponse.ok) {\n        name = userInfoResponse.body?.name || 'Unknown'\n        id = userInfoResponse.body?.id || 'Unknown'\n      }\n    } catch (error) {\n      const errorMessage = extractMessageFromError(error)\n      updateErrorMessage(dataDispatch, errorMessage)\n      console.error(error)\n    }\n    updateName(dataDispatch, name)\n    return { id, name }\n  }\n\n  // Sigin in using Auth0\n  const auth0Signin = async (useCodeChallenge: boolean) => {\n    try {\n      const authRequest: Record<string, string> = {\n        client_id: AUTH0_CLIENT_ID!,\n        response_type: 'code',\n        scope: AUTH0_SCOPES,\n      }\n      if (useCodeChallenge) {\n        // Alternate method to secret key. The looker host will generate\n        // a code challenge and a code verifier. The code challenge is an\n        // hashed version of the code verifier. The challenge is sent with\n        // the code request, the verifier is sent with the token request.\n        // The oauth2 server then hashes the verifier and compares to the\n        // code challenge. If they match a token will be returned.\n        authRequest.code_challenge_method = 'S256'\n      }\n      const response = await extensionSDK.oauth2Authenticate(\n        `${AUTH0_BASE_URL}/authorize`,\n        authRequest,\n        'GET'\n      )\n      const exchangeRequest: Record<string, string> = {\n        grant_type: 'authorization_code',\n        client_id: AUTH0_CLIENT_ID!,\n        code: response.code,\n      }\n      if (!useCodeChallenge) {\n        // Note the client secret is securely stored in the Looker server.\n        // Do NOT expose the client secret in the extension code.\n        exchangeRequest.client_secret =\n          extensionSDK.createSecretKeyTag('auth0_secret_key')\n      }\n\n      const codeExchangeResponse =\n        await extensionSDK.oauth2ExchangeCodeForToken(\n          `${AUTH0_BASE_URL}/login/oauth/token`,\n          exchangeRequest\n        )\n      const { access_token, expires_in } = codeExchangeResponse\n      const { id, name } = await getAuth0UserInfo(access_token)\n      const jwtToken = await signinDataServer(\n        AuthOption.Auth0,\n        id,\n        name,\n        access_token,\n        expires_in\n      )\n      updateLocationPushState(AuthOption.Auth0, jwtToken, access_token)\n    } catch (error) {\n      const errorMessage = extractMessageFromError(error)\n      if (\n        errorMessage.startsWith(\n          'Extension not entitled to access external oauth2 API url'\n        )\n      ) {\n        updateErrorMessage(\n          dataDispatch,\n          `Please add '${AUTH0_BASE_URL}/authorize' and '${AUTH0_BASE_URL}/login/oauth/token' to the extensions oauth2_urls entitlements`\n        )\n      } else {\n        updateErrorMessage(dataDispatch, 'Login failed')\n        console.error('failed to login', error)\n      }\n    }\n  }\n\n  // Get information about the user from Auth0\n  const getAuth0UserInfo = async (accessToken?: string) => {\n    let name = 'Unknown'\n    let id = 'Unknown'\n    try {\n      const userInfoResponse = await extensionSDK.fetchProxy(\n        `${AUTH0_BASE_URL}/userinfo`,\n        {\n          headers: {\n            Authorization: `Bearer ${accessToken}`,\n          },\n        }\n      )\n      if (userInfoResponse.ok) {\n        name = userInfoResponse.body?.name || 'Unknown'\n        id = userInfoResponse.body?.sub || 'Unknown'\n      }\n    } catch (error) {\n      const errorMessage = extractMessageFromError(error)\n      updateErrorMessage(dataDispatch, errorMessage)\n      console.error(error)\n    }\n    updateName(dataDispatch, name)\n    return { id, name }\n  }\n\n  // Custom login.\n  const customSignin = async () => {\n    const { id, name } = await getLookerUserInfo()\n    try {\n      const jwtToken = await signinDataServer(AuthOption.Custom, id, name)\n      updateLocationPushState(AuthOption.Custom, jwtToken)\n    } catch (error) {\n      updateErrorMessage(dataDispatch, 'Login failed')\n      console.error('failed to login', error)\n    }\n  }\n\n  // Get information about the user from Looker\n  const getLookerUserInfo = async () => {\n    let name = 'Unknown'\n    let id: string | number = 'Unknown'\n    try {\n      // Get information about user from Looker\n      const value = await coreSDK.ok(coreSDK.me())\n      name = value.display_name || 'Unknown'\n      id = value.id || 'Unknown'\n    } catch (error) {\n      const errorMessage = extractMessageFromError(error)\n      updateErrorMessage(dataDispatch, errorMessage)\n      console.error(error)\n    }\n    updateName(dataDispatch, name)\n    return { id, name }\n  }\n\n  // Sign the user into the Looker server. It returns a JWT tokem\n  // that reflects the session. The example shown here is very simple\n  // and should not be used in a production implementation.\n  const signinDataServer = async (\n    chosenAuthOption: AuthOption,\n    id: string | number,\n    name: string,\n    accessToken?: string,\n    expiresIn?: string\n  ) => {\n    // Log into the data server. Pass in the id. The data server\n    // can use the id to verify if the user is authorized to use the data server\n    // (it doesn't but it could).\n    const jwtToken = await dataServerAuth({\n      type: chosenAuthOption,\n      access_token: accessToken,\n      expires_in: expiresIn,\n      name,\n      id,\n    })\n    if (!jwtToken) {\n      updateErrorMessage(dataDispatch, 'Login failed')\n    }\n    return jwtToken\n  }\n\n  // Session state is stored in push state so it can survive a page\n  // reload. It will be lost if the user navigates away from this view.\n  const updateLocationPushState = (\n    chosenAuthOption: AuthOption,\n    jwtToken?: string,\n    accessToken?: string,\n    googleAccessToken?: string\n  ) => {\n    // Save access token data in push state.\n    // 1. access_token is the token from the authorization (anonymous does not have one)\n    // 2. jwt token is the jwt token generated by the server. It is used instead of a cookie\n    // 3. googleAccessToken is a token used for accessing the google sheets demo.\n    //    a. For the google login it is the same as the access token.\n    //    b. For the auth0 login it is requested from auth0 via the data server. Note\n    //       Auth0 recommends against this. This is only done for demonstration purposes\n    //       and hoops need to be jumped to do it.\n    if (jwtToken) {\n      history.replace(location.pathname, {\n        ...location.state,\n        authOption: chosenAuthOption,\n        accessToken,\n        jwtToken,\n        googleAccessToken,\n      })\n    } else {\n      history.replace(location.pathname, {})\n    }\n  }\n\n  // Sign in using the authorization option of choice. choices are:\n  // 1. anonymous - just logs into the data server. there is no validation. a session is created.\n  // 2. google - uses oauth2\\\n  // 3. Github - uses oauth2\n  // 3. Auth0 - uses oauth2\n  const signin = (chosenAuthOption: AuthOption) => {\n    setDialogOpen(false)\n    switch (chosenAuthOption) {\n      case AuthOption.Google:\n        googleSignin()\n        break\n      case AuthOption.Github:\n        githubSignin()\n        break\n      case AuthOption.Auth0:\n        auth0Signin(false)\n        break\n      case AuthOption.Auth0Alt:\n        auth0Signin(true)\n        break\n      default:\n        customSignin()\n    }\n  }\n\n  // Close the dialog\n  const closeDialog = () => {\n    setDialogOpen(false)\n  }\n\n  // Create message describing what kind of authorization is in use\n  let authMessage = ''\n  const { jwtToken, authOption } = location.state || {}\n  if (jwtToken) {\n    switch (authOption) {\n      case AuthOption.Google:\n        authMessage = `${name}, you are authorized using Google`\n        break\n      case AuthOption.Github:\n        authMessage = `${name}, you are authorized using Github`\n        break\n      case AuthOption.Auth0:\n        authMessage = `${name}, you are authorized using Auth0`\n        break\n      default:\n        authMessage = `${name}, you are authorized`\n    }\n  } else {\n    authMessage = 'You are not authorized!'\n  }\n\n  const oauthCodeChallengeSupported = intersects(\n    '>=7.17.0',\n    extensionSDK.lookerHostData?.lookerVersion || '7.0.0',\n    true\n  )\n\n  return (\n    <Box\n      display=\"flex\"\n      flexDirection=\"row\"\n      width=\"100%\"\n      justifyContent=\"space-between\"\n      alignItems=\"center\"\n    >\n      <Text>{authMessage}</Text>\n      <Button onClick={changeAuthorization}>\n        {jwtToken ? 'Sign out' : 'Sign in'}\n      </Button>\n      <Dialog isOpen={dialogOpen} onClose={closeDialog} width=\"50vw\">\n        <DialogContent>\n          <Heading>Choose an authentication method</Heading>\n          <SpaceVertical mt=\"xlarge\" mb=\"large\">\n            <ButtonOutline\n              width=\"100%\"\n              onClick={signin.bind(null, AuthOption.Google)}\n              disabled={GOOGLE_CLIENT_ID === ''}\n            >\n              Sign with Google (OAUTH implicit flow)\n            </ButtonOutline>\n            <ButtonOutline\n              width=\"100%\"\n              onClick={signin.bind(null, AuthOption.Github)}\n              disabled={GITHUB_CLIENT_ID === ''}\n            >\n              Sign with Github (OAUTH code flow with secret key)\n            </ButtonOutline>\n            <ButtonOutline\n              width=\"100%\"\n              onClick={signin.bind(null, AuthOption.Auth0)}\n              disabled={AUTH0_CLIENT_ID === ''}\n            >\n              Sign with Auth0 (OAUTH code flow with secret key)\n            </ButtonOutline>\n            <ButtonOutline\n              width=\"100%\"\n              onClick={signin.bind(null, AuthOption.Auth0Alt)}\n              disabled={AUTH0_CLIENT_ID === '' || !oauthCodeChallengeSupported}\n            >\n              Sign with Auth0 (OAUTH PKCE flow with code challenge)\n            </ButtonOutline>\n            <ButtonOutline\n              width=\"100%\"\n              onClick={signin.bind(null, AuthOption.Custom)}\n            >\n              Sign in (with custom secret key)\n            </ButtonOutline>\n          </SpaceVertical>\n        </DialogContent>\n      </Dialog>\n    </Box>\n  )\n}\n","/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\nimport type { Dispatch } from 'react'\nimport type { FetchProxyDataResponse } from '@looker/extension-sdk'\nimport { extractMessageFromError } from '../../../utils'\nimport { updateErrorMessage } from '../data/DataReducer'\n\n/**\n * Utility method to handle responses from the data server. Will log the user out\n * if a 401 response is returned.\n * @param response\n * @param dataDispatch\n * @param errorMessage\n */\nexport const handleResponse = (\n  response: FetchProxyDataResponse,\n  dataDispatch: Dispatch<any>,\n  errorMessage = 'Unexpected error. Has the data server been started? yarn start start-data-server',\n  firstTime = false\n): boolean => {\n  const { ok, status } = response\n  if (ok) {\n    if (!firstTime) {\n      updateErrorMessage(dataDispatch, undefined)\n    }\n    return true\n  } else {\n    if (status === 401) {\n      updateErrorMessage(dataDispatch, 'Token expired!')\n    } else {\n      updateErrorMessage(dataDispatch, errorMessage)\n    }\n    return false\n  }\n}\n\n/**\n * Standard error handling for data server response. Parses out the error messages and\n * provides feed to user if environment has not been setup correctly (for example\n * data server not running).\n * @param error\n * @param dataDispatch\n * @param firstTime\n */\nexport const handleError = (\n  error: any,\n  dataDispatch: Dispatch<any>,\n  firstTime = false\n) => {\n  console.error(error)\n  const errorMessage = extractMessageFromError(error)\n  if (errorMessage.startsWith('Extension not entitled to access external ')) {\n    updateErrorMessage(dataDispatch, errorMessage)\n  } else if (errorMessage.startsWith('Required Looker version ')) {\n    updateErrorMessage(\n      dataDispatch,\n      'This version of Looker does not support external API functions'\n    )\n  } else if (errorMessage.startsWith('Entitlements must be defined')) {\n    updateErrorMessage(\n      dataDispatch,\n      'Entitlements must be defined to use external API functionality'\n    )\n  } else if (firstTime) {\n    updateErrorMessage(\n      dataDispatch,\n      'Has the data server been started? yarn start start-data-server'\n    )\n  } else {\n    updateErrorMessage(\n      dataDispatch,\n      `An unexpected error occured: ${errorMessage}`\n    )\n  }\n}\n","/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nimport React, { useContext, useEffect } from 'react'\nimport { useLocation } from 'react-router-dom'\nimport type { DataTableColumns } from '@looker/components'\nimport {\n  DataTable,\n  DataTableAction,\n  DataTableItem,\n  DataTableCell,\n  Box,\n  Button,\n  FieldText,\n  Form,\n  Text,\n} from '@looker/components'\nimport type { Looker40SDK } from '@looker/sdk'\nimport type { ExtensionContextData2 } from '@looker/extension-sdk-react'\nimport { ExtensionContext2 } from '@looker/extension-sdk-react'\nimport { updatePosts, updateTitle } from '../../data/DataReducer'\nimport { handleResponse, handleError } from '../../utils/validate_data_response'\nimport { getDataServerFetchProxy } from '../../utils/fetch_proxy'\nimport { POSTS_SERVER_URL } from '../..'\nimport type { DataServerDemoProps } from './types'\n\n/**\n * Demonstration of Looker extension SDK external API use, fetchProxy\n *\n * A note on state. This component is rendered in a tab panel and such\n * can get unloaded while an asynchronous operation is in progress. Rather\n * than attempt to update state in this component after the component is\n * unmounted and get a nasty message in the console, state is held in the\n * parent component. Thus if the component is unloaded, no messages appear\n * in the console. The added advantage is that data will be ready to\n * display should the component be remounted.\n *\n * A note on data. A simple json server is provided. This server must be\n * started in order for this demo to work.\n */\nexport const DataServerDemo: React.FC<DataServerDemoProps> = ({\n  dataDispatch,\n  dataState,\n}) => {\n  // Get access to the extension SDK and the looker API SDK.\n  const extensionContext =\n    useContext<ExtensionContextData2<Looker40SDK>>(ExtensionContext2)\n  const { extensionSDK } = extensionContext\n  // React router location\n  const location = useLocation()\n\n  // Get state from the reducer\n  const { posts, name, title } = dataState\n\n  useEffect(() => {\n    // First time in get the posts\n    fetchPosts(true)\n  }, [])\n\n  // Handle creation of a post.\n  const onCreatePostSubmit = async (event: React.FormEvent) => {\n    // Need to prevent default processing for event from occurring.\n    // The button is rendered in a form and default action is to\n    // submit the form.\n    event.preventDefault()\n\n    try {\n      // A more complex use of the fetch proxy. In this case the\n      // content type must be included in the headers as the json server\n      // will not process it otherwise.\n      // Note the that JSON object in the string MUST be converted to\n      // a string.\n      const dataServerFetchProxy = getDataServerFetchProxy(\n        extensionSDK,\n        location.state\n      )\n      const response = await dataServerFetchProxy.fetchProxy(\n        `${POSTS_SERVER_URL}/posts`,\n        {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            title,\n            author: name,\n          }),\n        }\n      )\n      if (handleResponse(response, dataDispatch, 'Failed to create post')) {\n        updateTitle(dataDispatch, '')\n        fetchPosts()\n      }\n    } catch (error) {\n      handleError(error, dataDispatch)\n    }\n  }\n\n  // Handle deletion of a post message\n  const onPostDelete = async (post: any) => {\n    // Slightly more complex use of the fetch method. In this case\n    // the DELETE method is used.\n    try {\n      const dataServerFetchProxy = getDataServerFetchProxy(\n        extensionSDK,\n        location.state\n      )\n      const response = await dataServerFetchProxy.fetchProxy(\n        `${POSTS_SERVER_URL}/posts/${post.id}`,\n        {\n          method: 'DELETE',\n        }\n      )\n      if (handleResponse(response, dataDispatch, 'Failed to delete post')) {\n        updateTitle(dataDispatch, '')\n        fetchPosts()\n      }\n    } catch (error) {\n      handleError(error, dataDispatch)\n    }\n  }\n\n  // Fetch the posts\n  const fetchPosts = async (firstTime = false) => {\n    try {\n      // Use the extension SDK external API fetch method. A simple GET call.\n      // Note the response body is determined from the fetch response. The\n      // fetch call can take a third argument that indicates what type of\n      // response is expected.\n      const dataServerFetchProxy = getDataServerFetchProxy(\n        extensionSDK,\n        location.state\n      )\n      const response = await dataServerFetchProxy.fetchProxy(\n        `${POSTS_SERVER_URL}/posts`\n      )\n      if (handleResponse(response, dataDispatch, undefined, firstTime)) {\n        updatePosts(dataDispatch, response.body.reverse())\n      }\n    } catch (error) {\n      handleError(error, dispatchEvent, firstTime)\n    }\n  }\n\n  // Handle title change for a new post\n  const onTitleChange = (e: any) => {\n    updateTitle(dataDispatch, e.currentTarget.value)\n  }\n\n  // Post column definitions for action list\n  const postsColumns: DataTableColumns = [\n    {\n      id: 'id',\n      title: 'ID',\n      type: 'number',\n      size: 10,\n    },\n    {\n      id: 'title',\n      title: 'Title',\n      type: 'string',\n      size: 60,\n    },\n    {\n      id: 'author',\n      title: 'Author',\n      type: 'string',\n      size: 30,\n    },\n  ]\n\n  // render posts action list columns\n  const postsItems = posts.map((post: any) => {\n    // Action column, posts may be deleted\n    const actions = (\n      <>\n        <DataTableAction onClick={onPostDelete.bind(null, post)}>\n          Delete\n        </DataTableAction>\n      </>\n    )\n\n    // The columns\n    const { id, title, author } = post\n    return (\n      <DataTableItem key={id} id={id} actions={actions}>\n        <DataTableCell>{id}</DataTableCell>\n        <DataTableCell>{title}</DataTableCell>\n        <DataTableCell>{author}</DataTableCell>\n      </DataTableItem>\n    )\n  })\n\n  return (\n    <>\n      <Box\n        display=\"flex\"\n        flexDirection=\"row\"\n        justifyContent=\"space-between\"\n        mb=\"medium\"\n        alignItems=\"baseline\"\n      >\n        <Text>Posts data is being served from {POSTS_SERVER_URL}</Text>\n        <Box display=\"flex\" flexDirection=\"row\" alignItems=\"baseline\">\n          <Button ml=\"small\" onClick={() => fetchPosts()}>\n            Refresh data\n          </Button>\n        </Box>\n      </Box>\n      <Box\n        mb=\"medium\"\n        px=\"xlarge\"\n        pt=\"small\"\n        border=\"1px solid\"\n        borderColor=\"palette.charcoal200\"\n        borderRadius=\"4px\"\n      >\n        <Form onSubmit={onCreatePostSubmit}>\n          <FieldText\n            label=\"Title\"\n            name=\"title\"\n            value={title}\n            onChange={onTitleChange}\n            required\n          />\n          <Button disabled={title.length === 0}>Create Post</Button>\n        </Form>\n      </Box>\n      <DataTable columns={postsColumns} caption=\"Posts\">\n        {postsItems}\n      </DataTable>\n    </>\n  )\n}\n","/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nimport React, { useContext, useEffect } from 'react'\nimport { useLocation } from 'react-router-dom'\nimport type { DataTableColumns } from '@looker/components'\nimport { DataTable, DataTableItem, DataTableCell } from '@looker/components'\nimport type { Looker40SDK } from '@looker/sdk'\nimport type { ExtensionContextData2 } from '@looker/extension-sdk-react'\nimport { ExtensionContext2 } from '@looker/extension-sdk-react'\nimport { updateErrorMessage, updateSheetData } from '../../data/DataReducer'\nimport { GOOGLE_CLIENT_ID, AuthOption, POSTS_SERVER_URL } from '../..'\nimport { handleResponse, handleError } from '../../utils/validate_data_response'\nimport { getDataServerFetchProxy } from '../../utils/fetch_proxy'\n\nimport type { GoogleSheetsDemoProps } from './types'\n\n/**\n * Demonstrate usage of the google sheets API via the extension sdk fetch proxy\n */\nexport const GoogleSheetsDemo: React.FC<GoogleSheetsDemoProps> = ({\n  dataDispatch,\n  dataState,\n}) => {\n  // Get access to the extension SDK and the looker API SDK.\n  const extensionContext =\n    useContext<ExtensionContextData2<Looker40SDK>>(ExtensionContext2)\n  const { extensionSDK } = extensionContext\n\n  // React router setup\n  const location = useLocation()\n\n  useEffect(() => {\n    // Create a function so that async/await can be used in useEffect\n    const fetchData = async () => {\n      // Make sure the google client id has been defined\n      if (GOOGLE_CLIENT_ID === '') {\n        updateErrorMessage(\n          dataDispatch,\n          'Google client id has not been defined. Please see README.md for instructions.'\n        )\n      } else {\n        const { googleAccessToken, authOption } = location.state as any\n        const spreadsheetId = '1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms'\n        const range = 'Class Data!A2:E'\n        try {\n          if (authOption === AuthOption.Google) {\n            // The sheets API can be accessed directly when google is the OAUTH provider.\n            if (!googleAccessToken) {\n              // This should not happen\n              updateErrorMessage(dataDispatch, 'Google access token is missing')\n            } else {\n              // Read the spread sheet. Note that the spreadsheet id comes from the Google Sheets\n              // Browser quick start demo\n              // https://developers.google.com/sheets/api/quickstart/js\n              const response = await extensionSDK.fetchProxy(\n                `https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetId}/values/${range}?access_token=${googleAccessToken}`\n              )\n              if (handleResponse(response, dataDispatch)) {\n                const values: any[] = response.body?.values || []\n                updateSheetData(dataDispatch, values)\n              }\n            }\n          } else {\n            // If use is not logged in using google OAUTH the sheet is read using a\n            // proxy call to the data server. The data server will check to see if the\n            // user is authorized to make the call by checking the JWT token.\n            const dataServerFetchProxy = getDataServerFetchProxy(\n              extensionSDK,\n              location.state\n            )\n            const response = await dataServerFetchProxy.fetchProxy(\n              `${POSTS_SERVER_URL}/sheets/${spreadsheetId}/${range}`\n            )\n            if (handleResponse(response, dataDispatch)) {\n              const values: any[] = response.body?.values || []\n              updateSheetData(dataDispatch, values)\n            }\n          }\n        } catch (error) {\n          handleError(error, dispatchEvent)\n        }\n      }\n    }\n    // useEffect does not support async/await directly. Fake it with\n    // a function\n    fetchData()\n  }, [])\n\n  const { sheetData } = dataState\n\n  // Sheet column definitions for action list\n  const sheetColumns: DataTableColumns = [\n    {\n      id: 'name',\n      title: 'Name',\n      type: 'string',\n      size: 'medium',\n    },\n    {\n      id: 'sex',\n      title: 'Sex',\n      type: 'string',\n      size: 'medium',\n    },\n    {\n      id: 'collegeYear',\n      title: 'Year',\n      type: 'string',\n      size: 'medium',\n    },\n    {\n      id: 'state',\n      title: 'State',\n      type: 'string',\n      size: 'medium',\n    },\n    {\n      id: 'major',\n      title: 'Major',\n      type: 'string',\n      size: 'medium',\n    },\n  ]\n\n  // render posts action list columns\n  const sheetItems = (sheetData || []).map((sheetRow: any[]) => {\n    // The column data\n    const [name, sex, collegeYear, state, major] = sheetRow\n    return (\n      <DataTableItem key={name} id={name}>\n        <DataTableCell>{name}</DataTableCell>\n        <DataTableCell>{sex}</DataTableCell>\n        <DataTableCell>{collegeYear}</DataTableCell>\n        <DataTableCell>{state}</DataTableCell>\n        <DataTableCell>{major}</DataTableCell>\n      </DataTableItem>\n    )\n  })\n\n  return (\n    <>\n      {sheetData && (\n        <DataTable columns={sheetColumns} caption=\"Sheet items\">\n          {sheetItems}\n        </DataTable>\n      )}\n    </>\n  )\n}\n","/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nimport React, { useEffect, useReducer } from 'react'\nimport { useHistory, useLocation, useRouteMatch } from 'react-router-dom'\nimport {\n  MessageBar,\n  Box,\n  Divider,\n  Heading,\n  TabList,\n  Tab,\n  TabPanels,\n  TabPanel,\n} from '@looker/components'\nimport { SandboxStatus } from '../SandboxStatus'\nimport type { ExternalApiFunctionsProps } from './types'\nimport { Auth } from './components/Auth'\nimport { DataServerDemo } from './components/DataServerDemo'\nimport { GoogleSheetsDemo } from './components/GoogleSheetsDemo'\nimport {\n  initialState as dataInitialState,\n  reducer as dataReducer,\n  updateErrorMessage,\n} from './data/DataReducer'\n\n/**\n * External API demonstration. Demonstrates the following:\n * 1. The external API fetch proxy accessing a simple json data server.\n * 2. Oauth2 authorization with Google (implicit OAUTH2 flow). Note that other\n *    Oauth2 providers that support the implicit OAUTH2 flow can be used.\n * 3. Google sheets demo.\n */\nconst ExternalApiFunctions: React.FC<ExternalApiFunctionsProps> = () => {\n  // State is stored here as asynchronous actions may complete\n  // after components unload. If components own state, react puts messages\n  // on the console.\n  const [dataState, dataDispatch] = useReducer(dataReducer, dataInitialState)\n\n  // React router setup\n  const history = useHistory()\n  const location = useLocation()\n  const match = useRouteMatch<{ func: string; tab: string }>('/:func/:tab')\n\n  // Onetime initial setup for the component\n  useEffect(() => {\n    const tabIndex = parseInt(match?.params?.tab || '-1')\n    // If tab index not in the URL, add it.\n    if (tabIndex < 0 || tabIndex > 1) {\n      history.push(`${location.pathname}/0`, location.state)\n    }\n  }, [])\n\n  // Tab handling. Current tab is stored in URL so that it can be restored on\n  // page reload.\n  let selectedIndex = match ? Number(match.params.tab) : 0\n  selectedIndex = isNaN(selectedIndex) ? -1 : selectedIndex\n  const onSelectTab = (index: number) => {\n    const tabIndex = parseInt(match?.params?.tab || '-1')\n    if (tabIndex !== index) {\n      history.push(`/${match?.params?.func}/${index}`, location.state)\n    }\n  }\n\n  // Close the error message banner\n  const onDismiss = () => {\n    updateErrorMessage(dataDispatch, undefined)\n  }\n\n  // Get data from state. The user needs to be authorized to see the demos\n  const { errorMessage } = dataState\n  const { jwtToken } = (location.state as any) || {}\n\n  return (\n    <>\n      <Heading mt=\"xlarge\">External API Functions</Heading>\n      <SandboxStatus />\n      {errorMessage && (\n        <MessageBar intent=\"critical\" onPrimaryClick={onDismiss}>\n          {errorMessage}\n        </MessageBar>\n      )}\n      <Box padding=\"small\">\n        <Divider />\n        <Auth dataDispatch={dataDispatch} dataState={dataState} />\n        <Divider />\n        {jwtToken && (\n          <>\n            <TabList selectedIndex={selectedIndex} onSelectTab={onSelectTab}>\n              <Tab>Data Server Demo</Tab>\n              <Tab>Google Sheets Demo</Tab>\n            </TabList>\n            <TabPanels selectedIndex={selectedIndex}>\n              <TabPanel>\n                <DataServerDemo\n                  dataDispatch={dataDispatch}\n                  dataState={dataState}\n                />\n              </TabPanel>\n              <TabPanel>\n                <GoogleSheetsDemo\n                  dataDispatch={dataDispatch}\n                  dataState={dataState}\n                />\n              </TabPanel>\n            </TabPanels>\n          </>\n        )}\n      </Box>\n    </>\n  )\n}\n\nexport default ExternalApiFunctions\n","/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nimport React, { useEffect, useState } from 'react'\nimport { Paragraph } from '@looker/components'\nimport type { SandboxStatusProps } from './types'\n\nexport const SandboxStatus: React.FC<SandboxStatusProps> = () => {\n  const [sandboxStatus, setSandboxStatus] = useState('')\n\n  useEffect(() => {\n    try {\n      const parentWindow: any = (window as any).parent\n      // Attempt to get data from the parent window. This\n      // will fail in a sandboxed environment and in most\n      // cases we want this to fail.\n      // eslint-disable-next-line no-unused-expressions\n      parentWindow.looker?.version\n      setSandboxStatus('NOT')\n    } catch (err) {\n      setSandboxStatus('')\n    }\n  }, [])\n\n  return (\n    <Paragraph my=\"medium\">\n      This extension is <b>{sandboxStatus}</b> sandboxed.\n    </Paragraph>\n  )\n}\n"],"names":["AuthOption","POSTS_SERVER_URL","process","Action","initialState","posts","name","title","errorMessage","undefined","reducer","state","action","type","payload","updatePosts","updateName","updateTitle","updateErrorMessage","updateSheetData","sheetData","initialize","dispatch","extractMessageFromError","error","message","getDataServerFetchProxy","extensionSDK","locationState","init","jwtToken","headers","Authorization","createFetchProxy","Auth","dataState","dataDispatch","coreSDK","useContext","ExtensionContext2","dialogOpen","setDialogOpen","useState","history","useHistory","location","useLocation","useEffect","dataServerAuth","body","client_secret","createSecretKeyTag","response","serverProxy","method","Accept","JSON","stringify","ok","jwt_token","console","dataServerAuthOut","fetchProxy","changeAuthorization","replace","pathname","googleSignin","oauth2Authenticate","client_id","scope","response_type","access_token","expires_in","id","getGoogleUserInfo","signinDataServer","Google","updateLocationPushState","startsWith","accessToken","userInfoResponse","githubSignin","exchangeParameters","code","codeExchangeResponse","oauth2ExchangeCodeForToken","error_description","getGithubUserInfo","Github","auth0Signin","useCodeChallenge","authRequest","code_challenge_method","exchangeRequest","grant_type","getAuth0UserInfo","Auth0","sub","customSignin","getLookerUserInfo","Custom","value","me","display_name","chosenAuthOption","expiresIn","googleAccessToken","authOption","signin","Auth0Alt","authMessage","intersects","lookerHostData","lookerVersion","Box","display","flexDirection","width","justifyContent","alignItems","Text","Button","onClick","Dialog","isOpen","onClose","DialogContent","Heading","SpaceVertical","mt","mb","ButtonOutline","bind","disabled","GOOGLE_CLIENT_ID","GITHUB_CLIENT_ID","AUTH0_CLIENT_ID","handleResponse","firstTime","status","handleError","DataServerDemo","extensionContext","fetchPosts","onCreatePostSubmit","event","preventDefault","dataServerFetchProxy","author","onPostDelete","post","reverse","dispatchEvent","postsItems","map","actions","DataTableAction","DataTableItem","key","DataTableCell","ml","px","pt","border","borderColor","borderRadius","Form","onSubmit","FieldText","label","onChange","e","currentTarget","required","length","DataTable","columns","size","caption","GoogleSheetsDemo","fetchData","sheetItems","sheetRow","sex","collegeYear","major","useReducer","dataReducer","dataInitialState","match","useRouteMatch","tabIndex","parseInt","params","tab","push","selectedIndex","Number","isNaN","SandboxStatus","MessageBar","intent","onPrimaryClick","padding","Divider","TabList","onSelectTab","index","func","Tab","TabPanels","TabPanel","sandboxStatus","setSandboxStatus","window","parent","looker","version","err","my"],"sourceRoot":""}